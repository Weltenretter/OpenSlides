@use '~@angular/material' as mat;
@import '.~assets/styles/color-palettes/os-blue';
@import '.~assets/styles/color-palettes/wr-erden-blau';
@import '.~assets/styles/color-palettes/wr-universums-schwarz';
@import '.~assets/styles/color-palettes/wr-venus-gelb';
@import '.~assets/styles/color-palettes/wr-mars-rot';

// Generate paletes using: https://material.io/design/color/
// default values for mat-palette: $default: 500, $lighter: 100, $darker: 700.
$openslides-primary: mat.define-palette($wr-universums-schwarz);
$openslides-accent: mat.define-palette($wr-erden-blau);
$openslides-warn: mat.define-palette($wr-mars-rot);

// Create the theme object (a Sass map containing all of the palettes).
$openslides-default-light: mat.define-light-theme($openslides-primary, $openslides-accent, $openslides-warn);

// Create Sass color vars (for using in scss files).
// This will be set dynamically with the selecting theme

$os-outline: mat.get-color-from-palette(mat.$grey-palette, 300);
$os-background: mat.get-color-from-palette(mat.$grey-palette, 100);

/** This is the workaround to set a custom background-color
 *  In the first step the color must be merged, in order to have to a map.
 *  The components will get a value from this map.
 */
$background: map-get($openslides-default-light, background);
$background: map_merge(
    $background,
    (
        background: $os-background
    )
);

/**
 *  Merge the theme with the custom-background.
 */
$openslides-default-light: map_merge(
    $openslides-default-light,
    (
        background: $background
    )
);
